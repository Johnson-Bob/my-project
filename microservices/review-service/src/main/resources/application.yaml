spring:
  application:
    name: review
  datasource:
    url: jdbc:postgresql://localhost:5432/review-db
    username: user
    password: pwd
    hikari:
      initializationFailTimeout: 60000
  jpa:
    hibernate:
      ddl-auto: update
  kafka:
    bootstrap-servers: 127.0.0.1:9092
  cloud:
    function:
      definition: messageProcessor
    stream:
      default:
        contentType: application/json
      bindings:
        messageProcessor-in-0:
          destination: reviews
          group: reviewGroup
          consumer:
            maxAttempts: 3
            backOffInitialInterval: 500
            backOffMaxInterval: 1000
            backOffMultiplier: 2.0
            partitioned: true
            instanceCount: 2
      kafka:
        binder:
          brokers: 127.0.0.1
          defaultBrokerPort: 9092
          replication-factor: 1
          autoCreateTopics: true
        bindings:
          messageProcessor-in-0:
            consumer:
              enableDlq: true

server:
  port: 7003
  error:
    include-message: always

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

management:
  endpoint:
    health:
      show-details: "ALWAYS"
  endpoints:
    web:
      exposure:
        include: "health,info"

logging:
  level:
    root: INFO
    com.example.microservices: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

app:
  threadPoolSize: 10
  taskQueueSize: 100

---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://postgres/review-db
  kafka:
    bootstrap-servers: kafka:9092
  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka

server:
  port: 8080

eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:8761/eureka/

---
spring:
  config:
    activate:
      on-profile: streaming_instance_0
  cloud:
    stream:
      bindings:
        messageProcessor-in-0:
          consumer:
            instanceIndex: 0

---
spring:
  config:
    activate:
      on-profile: streaming_instance_1
  cloud:
    stream:
      bindings:
        messageProcessor-in-0:
          consumer:
            instanceIndex: 1